import {maxSumMinSum} from "../maxSumMinSum";

describe("Test functionality of maxSumMinSum function", () => {
    it("should return a string notifying that the argument passed is invalid", () => {
        expect(maxSumMinSum(369)).toEqual("invalid argument type");
        expect(maxSumMinSum("pehg")).toEqual("invalid argument type");
        expect(maxSumMinSum(true)).toEqual("invalid argument type");
        expect(maxSumMinSum(false)).toEqual("invalid argument type");
        expect(maxSumMinSum(null)).toEqual("invalid argument type");
        expect(maxSumMinSum(undefined)).toEqual("invalid argument type");
        expect(maxSumMinSum({})).toEqual("invalid argument type");
        expect(maxSumMinSum(function() {})).toEqual("invalid argument type");
    });

    it("should return a string notifying that the array passed as argument is empty", () => {
        expect(maxSumMinSum([])).toEqual("Empty array");
    });

    it("should return an array of a duplicate number if the argument passed is an array with only one element inside", () => {
        expect(maxSumMinSum([3])).toEqual([3, 3]);
        expect(maxSumMinSum([6])).toEqual([6, 6]);
        expect(maxSumMinSum([9])).toEqual([9, 9]);
    });

    it("should return an array with two elements inside, the first is renerated by the sum of the two lower numbers in value of the array passed as an argument (after sorting), the second one is generated by the 2 largest numbers in value of the array passed as an argument (after sorting)", () => {
        expect(maxSumMinSum([1, 3, 5, 2])).toEqual([3, 8]);
        expect(maxSumMinSum([12, 3, 5, 9, 3, 1, 3, 4])).toEqual([4, 21]);
    });
});
